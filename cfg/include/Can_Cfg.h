/**
*   @file    Can_Cfg.h
*   @implements Can_Cfg.h_Artifact
*   @version 1.0.5
*
*   @brief   AUTOSAR Can - module interface
*   @details Configuration settings generated by user settings.
*
*   @addtogroup CAN_DRIVER
*   @{
*/
/*==================================================================================================
*   Project              : AUTOSAR 4.0 MCAL
*   Platform             : PA
*   Peripheral           : FLEXCAN
*   Dependencies         : 
*
*   Autosar Version      : 4.0.3
*   Autosar Revision     : ASR_REL_4_0_REV_0003
*   Autosar Conf.Variant :
*   SW Version           : 1.0.5
*   Build Version        : MPC574XG_MCAL_1_0_5_RTM_ASR_REL_4_0_REV_0003_20171215
*
*   (c) Copyright (c) 2006-2016 Freescale Semiconductor, Inc. 
*       Copyright 2017 NXP.
*   All Rights Reserved.
==================================================================================================*/
/*==================================================================================================
==================================================================================================*/
/*
@brief   (CAN023) The consistency of the configuration must be checked by the configuration tool(s).
@brief   (CAN022) The code configurator of the Can module is CAN controller specific.
         If the CAN controller is sited on-chip, the code generation tool for the Can module is Controller specific.
         If the CAN controller is an external device the generation tool must not be Controller specific.
@brief   (CAN024) The valid values that can be configured are hardware dependent.
         Therefore the rules and constraints can't be given in the standard.
         The configuration tool is responsible to do a static configuration checking, also regarding dependencies between modules (i.e. Port driver, MCU driver etc.)
*/
/*
* @file    Can_Cfg.h
*/

#ifndef CAN_CFG_H
#define CAN_CFG_H

#ifdef __cplusplus
extern "C"{
#endif

/**
* @page misra_violations MISRA-C:2004 violations
*
* @section [global]
* Violates MISRA 2004 Required Rule 5.1, Identifiers (internal and external) shall not rely 
* on the significance of more than 31 characters. The used compilers use more than 31 chars for
* identifiers.
*
* @section [global]
* Violates MISRA 2004 Required Rule 1.4, The compiler/linker shall be checked to ensure that 31 character
* signifiance and case sensitivity are supported for external identifiers.
*
* @section Can_Cfg_h_REF_1
* Violates MISRA 2004 Required Rule 19.15, Repeated include file MemMap.h
* There are different kinds of execution code sections.
*
* @section Can_Cfg_h_REF_2
* Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined
* This violation is due to function like macros defined for pooling operations.
* Function like macros are used to reduce code complexity.
*
* @section Can_Cfg_h_REF_3
* Violates MISRA 2004 Required Rule 19.4 , The C macro expand to a variable declaration statement or 
* to a function call statement. This C macros is needed in order to have a better mentenability of the code.
*
* @section Can_Cfg_h_REF_4
* Violates MISRA 2004 Required Rule 8.7, Global variables containing the generated configuration
* shall be defined in a separate source file and can't be defined inside a function although it is accessed
* by a single function.
*/
/*==================================================================================================
*                                        INCLUDE FILES
* 1) system and project includes
* 2) needed interfaces from external units
* 3) internal and external interfaces from this unit
==================================================================================================*/
/* @violates @ref Can_Cfg_h_REF_1 Violates MISRA 2004 Required Rule 19.15, Repeated include file MemMap.h*/
#include "Std_Types.h"
#include "Soc_Ips.h"


/*==================================================================================================
*                              SOURCE FILE VERSION INFORMATION
==================================================================================================*/
/*
* @file           Can_Cfg.h
*/
#define CAN_VENDOR_ID_CFG                       43
#define CAN_MODULE_ID_CFG                       80
#define CAN_AR_RELEASE_MAJOR_VERSION_CFG_H      4
#define CAN_AR_RELEASE_MINOR_VERSION_CFG_H      0
#define CAN_AR_RELEASE_REVISION_VERSION_CFG_H   3
#define CAN_SW_MAJOR_VERSION_CFG_H              1
#define CAN_SW_MINOR_VERSION_CFG_H              0
#define CAN_SW_PATCH_VERSION_CFG_H              5

#ifndef DISABLE_MCAL_INTERMODULE_ASR_CHECK
    /* Check if header file and Std_Types.h file are of the same Autosar version */
    #if ((CAN_AR_RELEASE_MAJOR_VERSION_CFG_H != STD_AR_RELEASE_MAJOR_VERSION) || \
         (CAN_AR_RELEASE_MINOR_VERSION_CFG_H != STD_AR_RELEASE_MINOR_VERSION)    \
        )
        #error "AutoSar Version Numbers of Can_Cfg.h and Std_Types.h are different"
    #endif

#endif


/**
* @brief          Support for User Mode feature.
* @details        This parameter is enabled only in order to support the write access to some registers are protected in user mode.
*/

#define CAN_ENABLE_USER_MODE_SUPPORT (STD_OFF)



/*==================================================================================================
*                                          CONSTANTS
==================================================================================================*/
/**
* @brief          Implicit index value used by Full can hardware objects.
* @details        Implicit index value used by Full can hardware objects.
*
*/
#define CAN_MAXMASKCOUNT    ((Can_HwHandleType)65535U)

/**
* @brief          Can Controllers. Defines for conversion between object names and object IDs.
* @details        Can Controllers. Defines for conversion between object names and object IDs.
(PR-MCAL-2944)Numeric ID's in configuration and definition of symbolic names in Can_Cfg.h file
*
*/
#define CanConf_CanController_CanController_0 ((uint8)0U)


/**
* @brief          Can Hardware Objects.
* @details        Can Hardware Objects.
(PR-MCAL-2944)Numeric ID's in configuration and definition of symbolic names in Can_Cfg.h file.
*
*/

#define CanConf_CanHardwareObject_CanHardwareObject_0  0U /* RECEIVE object of Can Controller ID = 0 */
#define CanConf_CanHardwareObject_CanHardwareObject_1  1U /* TRANSMIT object of Can Controller ID = 0 */

/*
* @brief          Symbolic names for CanObjectId
* @details        Symbolic names for CanObjectId maintained for compatibility with old testcases/applications
*
*/
#define CanHardwareObject_0  0U /* RECEIVE object of Can Controller ID = 0 */
#define CanHardwareObject_1  1U /* TRANSMIT object of Can Controller ID = 0 */


#define CAN_LPDU_NOTIFICATION_ENABLE  (STD_OFF)

/*
* @brief          Extended identifiers.
* @details        Extended identifiers.
- (STD_ON)  - if at least one extended identifier is used.
- (STD_OFF) - if no extended identifiers are used at all
If no extended identifiers are used then the IDs and MASKs can be stored in uint16 rather than uint32.
*
*/
#define CAN_EXTENDEDID (STD_ON)
/*
* @brief          Switches the Can_SetBaudrate API ON or OFF.
* @details        Configuration of Can_SetBaudrate(Controller, BaudRateConfigID):This service shall set the baud rate configuration of the CAN controller. Depending
on necessary baud rate modifications the controller might have to reset.
*
*/
#define CAN_SET_BAUDRATE_API (STD_OFF)
/*
* @brief          Switches the Can_ChangeBaudrate API and Can_CheckBaudRate API ON or OFF.
* @details        (CAN460) Configuration of Can_CheckBaudrate(Controller, Baudrate): If Can supports changing of the
baudrate and thus this service, shall be configurable via CAN_CHANGE_BAUDRATE_SUPPORT
*
*/
#define CAN_CHANGE_BAUDRATE_API (STD_ON)
/*
* @brief          Switches the Development Error Detection and Notification ON or OFF.
* @details        (CAN028) Call the Development Error Tracer when DET is switched on and the Can module detects an error.
(CAN082) The detection of development errors is configurable (ON / OFF) at pre- compile time.
The switch CanDevErrorDetection (see chapter 10) shall activate or deactivate the detection of all development errors.
*
*/
#define CAN_DEV_ERROR_DETECT (STD_ON)
/*
* @brief          CAN driver support for multiple interrupts.
* @details        CAN driver support for multiple interrupts.
*
*/
#define CAN_MULTIPLE_INTERRUPTS_SUPPORT (STD_ON)
/*
* @brief          Extended number of can hardware objects
* @details        Extended number of can hardware objects:
- STD_ON if more than 256 can hardware objects are needed (up to 65536)
- STD_OFF if no more than 256 can hardware objects are needed
The specification only allows up to 256 can hardware objects. The driver supports a non-standard extension of this limit.
@violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 19.4, source code mentenability.
*
*/
#define CAN_MBCOUNTEXTENSION (STD_OFF)
/*
* @brief          Support for version info API
* @details        Switches the Can_GetVersionInfo() API ON or OFF.
*
*/
#define CAN_VERSION_INFO_API (STD_ON)
/*
* @brief          Support for Multiplexed Transmision
* @details        MB set for Tx is put on bus from any TxMB that is available (free).
*                 (CAN277) The Can module shall allow that the functionality Multiplexed Transmission is statically configurable (ON | OFF) at pre-compile time.
*
*/
#define CAN_MULTIPLEXED_TRANSMISSION (STD_ON)
/*
* @brief          Support for Transmision Cancellation
* @details        Support for Transmision Cancellation
*                 (CAN278) The Can module shall allow that the functionality Transmit Cancellation is statically configurable (ON | OFF) at pre-compile time.
*
*/
#define CAN_HW_TRANSMIT_CANCELLATION (STD_ON)
/*
* @brief          Support for Identical Id Cancellation
* @details        Enables/disables cancellation of pending PDUs with identical ID.
*
*/
#define CAN_IDENTICAL_ID_CANCELLATION (STD_ON)
/*
* @brief          Support for Special MB Abort API
* @details        Enable an additional API, to write an ABORT code (b1001) to the MBCB filed of the MB to abort a message transmission.
*
*/
#define CAN_API_ENABLE_ABORT_MB (STD_OFF)
/*
* @brief          Support for MB Abort  API
* @details         This parameter is enabled only if CanMultiplexedTransmission=STD_ON and aborts only one message buffer
*/
#define CAN_ABORT_ONLY_ONE_MB (STD_OFF)
/*
* @brief          Disable errata e10368 in some derivative
* @details        In some derivative, it is not impacted by errata e10368. This define is for removing workaround when using these derivative.
*
*/
#define CAN_E01368_INCONSISTENT (STD_ON)

/*
* @brief          Instance # of the driver - used for Det_ReportError().
* @details        Instance # of the driver - used for Det_ReportError().
*
*/
#define CAN_INSTANCE 0U

/*
* @brief          Platform support mix of controllers with 64 and 32 MBs.
* @details        Platform support mix of controllers with 64 and 32 MBs.
*
*/
#define CAN_MIX_MB_SUPPORT (STD_OFF)
/*
* @brief          Platform support for detection and correction of memory errors
* @details        Platform support for detection and correction of memory errors
*
*/
#define CAN_MEMORY_ECC_SUPPORT (STD_OFF)
/*
* @brief          Maximum number of Message Buffers configured.
* @details        Maximum number of Message Buffers configured.
*
*/
#define CAN_MAXMBCOUNT_0  2U

/*
* @brief          Maximum possible Message Buffers per controller specific to this platform.
* @details        Maximum possible Message Buffers per controller specific to this platform.
*
*/


#define CAN_MAXMB_SUPPORTED 96U


/*
* @brief          Maximum number of Message Buffers configured.
* @details        Maximum number of Message Buffers configured.
*
*/
#define CAN_MAXMB_CONFIGURED 2U

/*
* @brief          Maximum possible controllers per specific derivative.
* @details        Maximum possible controllers per specific derivative.
*
*/
#define CAN_MAXCTRL_SUPPORTED 8U

/**
* @brief          Maximum No. of supported controllers (vary according to Processor Family).
* @details        Maximum No. of supported controllers (vary according to Processor Family).
*
*/
#define CAN_MAXCONTROLLERCOUNT_0  1U

/*
* @brief          Maximum No. of controllers Configured
* @details      Maximum No. of controllers Configured
*
*/
#define CAN_MAXCTRL_CONFIGURED 1U


/**
* @brief          Hardware events detected by an interrupt or by polling
* @details        (CAN099) The hardware events may be detected by an interrupt or by polling status flags of the hardware objects.
*                 The configuration possibilities regarding polling is hardware dependent (i.e. which events can be polled, which events need to be polled), and not restricted by this standard.
*                 (CAN007)It shall be possible to configure the driver such that no interrupts at all are used (complete polling).
*
*/

/**
* @brief          This macros enable Interrupts for controllers if Tx processing is set to Interrupt Mode.
* @details        This macros enable Interrupts for controllers if Tx processing is set to Interrupt Mode.
*
*/
#define CAN_A_TXINT_SUPPORTED   (STD_OFF)








/*
* @brief          This macro enables Can_MainFunction_Write() if at least one controller is set to process Tx in Polling Mode.
* @details        This macro enables Can_MainFunction_Write() if at least one controller is set to process Tx in Polling Mode.
*
*/
#define CAN_TXPOLL_SUPPORTED (STD_ON)

/**
* @brief          This macros enable Interrupts for controllers if Rx processing is set to Interrupt Mode.
* @details        This macros enable Interrupts for controllers if Rx processing is set to Interrupt Mode.
*
*/
#define CAN_A_RXINT_SUPPORTED   (STD_OFF)








/*
* @brief          This macro enables Can_MainFunction_Read() if at least one controller is set to process Rx in Polling Mode.
* @details        This macro enables Can_MainFunction_Read() if at least one controller is set to process Rx in Polling Mode.
*
*/
#define CAN_RXPOLL_SUPPORTED (STD_ON)
/*
* @brief          This macro enables Can_ProcessTx() and Can_ProcessRx() if at least one controller is set to process TX/Rx in Interrupt Mode.
* @details        This macro enables Can_ProcessTx() and Can_ProcessRx() if at least one controller is set to process TX/Rx in Interrupt Mode.
*
*/

#define CAN_TX_RX_INTR_SUPPORTED    (STD_OFF)


/**
* @brief          This macros enable Interrupts for controllers if BusOff processing is set to Interrupt Mode.
* @details        This macros enable Interrupts for controllers if BusOff processing is set to Interrupt Mode.
*
*/
#define CAN_A_BUSOFFINT_SUPPORTED   (STD_OFF)








/*
* @brief          This macro enables Can_MainFunction_BusOff() if at least one controller is set to process BusOff in Polling Mode.
* @details        This macro enables Can_MainFunction_BusOff() if at least one controller is set to process BusOff in Polling Mode.
*
*/
#define CAN_BUSOFFPOLL_SUPPORTED (STD_ON)
/*
* @brief          Maximum number of MB Filters configured.
* @details        Maximum number of MB Filters configured.
*
*/
#define CAN_MAXFILTERCOUNT_0  1U

/**
* @brief          Maximum number of baudrate configured.
* @details        Maximum number of baudrate configured.
*                 Controller Baudrates configured are in kbps
*
*/
#define CAN_CFGSET0_BAUDRATE_FC_A_0         500U
#define CAN_CFGSET0_MAX_BAUDRATE_FC_A_0          1U

/* CAN FD INIT*/


#define CAN_FD_MODE_ENABLE (STD_OFF)



#define CAN_CBT_ENABLE (STD_OFF)

#define CAN_CONTROLLER_FD_ISO_CANFD (STD_ON)

#define CAN_CONTROLLER_FD_PREXCEN (STD_ON)
#define CAN_CONTROLLER_FD_EDFLTDIS (STD_ON)
/*
* @brief          Maximum number of Filters configured for RxFifo.
* @details        Maximum number of Filters configured for RxFifo.
*
*/

/*
* @brief          Support for Rx Fifo
* @details        Support for Rx Fifo - If at least one controller supports RxFifo, then this define is set to STD_ON.
*                 This define is global for the entire hardware unit (all controllers). Every controller has particular
*                 configuration for Rx Fifo (see Can_ControllerConfigType structure).
*
*/
#define CAN_RXFIFO_ENABLE (STD_OFF)
/*
* @brief          Set if Rx Fifo events (Warning/Overflow/FrameAvailable) are configured on the same int on INTC vector table.
* @details        Set if Rx Fifo events (Warning/Overflow/FrameAvailable) are configured on the same int on INTC vector table.
*                 Based on this define separate interrupts handlers or not will be used for the 3 events of the RxFifo.
*
*/
#define CAN_RXFIFO_EVENT_UNIFIED (STD_ON)
/*
* @brief          Error notification enabled/disabled.
* @details        Enables/Disables the Error Controller Notification. Used for Interrupts mapping in Can_Irq.c file.
*
*/
#define CAN_ERROR_NOTIFICATION_ENABLE (STD_OFF)
/*
* @brief          Index into the configuration structures.
* @details        Index into the configuration structures.Indexes used for accessing the 'Can_ControlerDescriptorType' structure.
*                 NOTE that index order from hardware (where CAN_A has always index 0, ..)
*                 may not be the same with the order from the 'Can_ControlerDescriptorType' structure (where user can define controllers in any order).
*                 Count also the number of controllers that have interrupts enabled.
*
*/
#define CAN_FCA_INDEX       ((uint8)0U)

/*
* @brief          Index into the hardware platform.
* @details        Index into the hardware platform.Indexes used for accessing the 'Can_ControlerDescriptorType' structure.
*
*/
#define FLEXCAN_A_OFFSET    ((uint8)0U)

/*
* @brief          RxFifo Functionality enabled/disabled. Used for Interrupts mapping in Can_Irq.c file.
* @details        RxFifo Functionality enabled/disabled. Used for Interrupts mapping in Can_Irq.c file.
*
*/
#define CAN_A_FIFO_EN (STD_OFF)
/*
* @brief          Error notification enabled/disabled.
* @details        Enables/Disables the Error Controller Notification. Used for Interrupts mapping in Can_Irq.c file.
*
*/
#define CAN_A_ERROR_NOTIFICATION_ENABLE (STD_OFF)

/*
* @brief          Optimization of interrupt service code for size.
* @details        Optimization of interrupt service code for size.
*
*/
#define CAN_ISROPTCODESIZE (STD_OFF)
/*
* @brief          Enable Non-Autosar API for Dual-Clock support.
* @details        Enable Non-Autosar API for Dual-Clock support.
*                 This can be set to STD_ON only if it is activated from Resource file (Can.CanConfig.DualClockMode = STD_ON)
*
*/
#define CAN_DUAL_CLOCK_MODE (STD_OFF)
/*
* @brief          Enable Non-Autosar API for Dual-Clock support.
* @details        Enable Non-Autosar API for Dual-Clock support.
*                 This can be set to STD_ON only if it is activated from Resource file (Can.CanConfig.DualClockMode = STD_ON)
*
*/
#define  CAN_CLKSRC_CONFIG_MASK_U32 (0x00002000U)
/*
* @brief          (CAN113_Conf) Specifies the maximum time for blocking function until a timeout is detected. Unit in loops.
* @details        (CAN281) The Can module shall use the free running timer provided by the system service for timeout detection in case the hardware does not react
*                  in the expected time (hardware malfunction) to prevent endless loops.
*
*/

#if defined(ERR_IPV_FLEXCAN_0008)
    #if (ERR_IPV_FLEXCAN_0008 == STD_ON)
        #define CAN_TIMEOUT_DURATION 50000U
    #else
        #error: The define ERR_IPV_FLEXCAN_0008 should not be STD_OFF
    #endif
#else
    #define CAN_TIMEOUT_DURATION 20000U
#endif /* ERR_IPV_FLEXCAN_0008 */


#define CAN_PRECOMPILE_SUPPORT (STD_OFF)

/**
* @brief          Export Can_ConfigType structure.
* @details        Export Can_ConfigType structure. This is the type of the external data structure containing
*                 the overall initialization data for the CAN driver and affecting all controllers.
*
*/
#if (CAN_PRECOMPILE_SUPPORT == STD_OFF)
    /* Export Driver configuration */
    /* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 19.4, source code mentenability. */
    #define CAN_INIT_CONFIG_PB_DEFINES \
         extern CONST(Can_ConfigType, CAN_CONST) CanConfigSet_0; 
#endif

/*
* @brief          Periods for cyclic call of Main function
* @details        (CAN355_Conf) CanMainFunctionBusoffPeriod - This parameter describes the period for cyclic call to Can_MainFunction_Busoff. Unit is seconds.
*
*/
#define CAN_MAINFUNCTION_PERIOD_BUSOFF (0U)

#if (CAN_RXPOLL_SUPPORTED == STD_ON)
/*
* @brief          Periods for cyclic call of Main function
* @details        (CAN356_Conf) CanMainFunctionReadPeriod - This parameter describes the period for cyclic call to Can_MainFunction_Read. Unit is seconds.
*
*/
#define CAN_MAINFUNCTION_PERIOD_READ    (0.0010F)
#define CAN_MAINFUNCTION_MULTIPLE_READ   (STD_OFF)
#endif /* (CAN_RXPOLL_SUPPORTED == STD_OFF) */

#if (CAN_TXPOLL_SUPPORTED == STD_ON)
/*
* @brief          Periods for cyclic call of Main function
* @details        (CAN356_Conf) CanMainFunctionWritePeriod - This parameter describes the period for cyclic call to Can_MainFunction_Write. Unit is seconds.
*
*/
#define CAN_MAINFUNCTION_PERIOD_WRITE    (0.0010F)
#define CAN_MAINFUNCTION_MULTIPLE_WRITE   (STD_OFF)
#endif /* (CAN_TXPOLL_SUPPORTED == STD_OFF) */

/*
* @brief          Periods for cyclic call of Main function Mode
* @details        (CAN376_Conf) This parameter describes the period for cyclic call to Can_MainFunction_Mode. Unit is seconds.
*
*/
#define CAN_MAINFUNCTION_MODE_PERIOD 0U
/*
* @brief    Defines if Backwards Compatibility Configuration (BCC) feature of CAN controller is used in the configuration.
*           If BCC feature of CAN controller is enabled, Individual Rx masking and queue feature are disabled.
*           If BCC feature of CAN controller is disabled, Individual Rx masking and queue feature are enabled.
*/
#define CAN_BCC_SUPPORT_ENABLE (STD_OFF)
/*
@brief    Macro used to define the maximum of Can object IDs configured  .
*/
#define CAN_MAX_OBJECT_ID ((uint32)2U)

#define CAN_CONTROLLER_REFERENCE_COUNTER 8

/*==================================================================================================
*                                      DEFINES AND MACROS
==================================================================================================*/

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 19.4, source code mentenability. */
#define CAN_MB_CONTROLLER_1     96U
/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 19.4, source code mentenability. */
#define CAN_MB_CONTROLLER_2     96U
/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 19.4, source code mentenability. */
#define CAN_MB_CONTROLLER_3     96U
/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 19.4, source code mentenability. */
#define CAN_MB_CONTROLLER_4     96U
/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 19.4, source code mentenability. */
#define CAN_MB_CONTROLLER_5     96U
/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 19.4, source code mentenability. */
#define CAN_MB_CONTROLLER_6     96U
/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 19.4, source code mentenability. */
#define CAN_MB_CONTROLLER_7     96U
/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 19.4, source code mentenability. */
#define CAN_MB_CONTROLLER_8     96U

/*==================================================================================================
*                                             ENUMS
==================================================================================================*/

/*==================================================================================================
*                                STRUCTURES AND OTHER TYPEDEFS
==================================================================================================*/

/*==================================================================================================
*                                GLOBAL VARIABLE DECLARATIONS
==================================================================================================*/

/*==================================================================================================
*                                    FUNCTION PROTOTYPES
==================================================================================================*/


#ifdef __cplusplus
}
#endif

#endif /* _CAN_CFG_H_ */

/** @} */
